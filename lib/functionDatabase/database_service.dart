import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_auth/firebase_auth.dart';

class DatabaseService {
  final FirebaseDatabase _firebaseDatabase = FirebaseDatabase.instance;

  /// Create (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà path ‚Üí set ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°)
  Future<void> create({
    required String path,
    required Map<String, dynamic> data,
  }) async {
    DatabaseReference ref = _firebaseDatabase.ref().child(path);
    await ref.set(data);
  }

  /// Read once (‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  Future<DataSnapshot?> read({required String path}) async {
    final DatabaseReference ref = _firebaseDatabase.ref().child(path);
    final DataSnapshot snapshot = await ref.get();
    return snapshot.exists ? snapshot : null;
  }

  /// Update (‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‚Üí ‡πÑ‡∏°‡πà‡∏•‡∏ö field ‡∏≠‡∏∑‡πà‡∏ô)
  Future<void> update({
    required String path,
    required Map<String, dynamic> data,
  }) async {
    DatabaseReference ref = _firebaseDatabase.ref().child(path);
    await ref.update(data);
  }

  /// Overwrite (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà path ‚Üí ‡πÉ‡∏ä‡πâ set())
  Future<void> overwrite({
    required String path,
    required Map<String, dynamic> data,
  }) async {
    DatabaseReference ref = _firebaseDatabase.ref().child(path);
    await ref.set(data);
  }

  /// Delete (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà path)
  Future<void> delete({required String path}) async {
    DatabaseReference ref = _firebaseDatabase.ref().child(path);
    await ref.remove();
  }

  /// Stream realtime (‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
  Stream<DatabaseEvent> stream({required String path}) {
    DatabaseReference ref = _firebaseDatabase.ref().child(path);
    return ref.onValue;
  }

  // ---------- üîë ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö User Authentication ----------

  /// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<DataSnapshot?> getCurrentUserData() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return null;

    final ref = _firebaseDatabase.ref("users/${user.uid}");
    final snapshot = await ref.get();
    return snapshot.exists ? snapshot : null;
  }

  /// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<void> updateCurrentUserData(Map<String, dynamic> data) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final ref = _firebaseDatabase.ref("users/${user.uid}");
    await ref.update(data);
  }
}
